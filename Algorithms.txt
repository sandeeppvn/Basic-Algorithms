#Sequential Search
Search(a[n],s)
{
	i=0;
	while(i<n && a[i]!=s)
		i++;

	if(i>=n)
		return false;
	return true;
}

#Bubble Search
BubbleSearch(a,n,a[n],s)
{
	m=a+n/2;
	if(a[m]==s)
		return true;
	if(a==n)
		return flase;


	if(a[m]>s)
		BubbleSearch(m+1,n,a[n],s)
	else if(a[m]<s)
		BubbleSearch(m,n-1,a[n],s)	
}

#Selection Sort
SelectionSort(a[n])
{
	for(i=0;i<n-1;i++)
	{
		min=i;
		for(j=i;j<n;j++)
		{
			if(a[j]<min)
				min=j;	
		}
		temp=a[i];
		a[i]=a[min];
		a[min]=temp;
	}
}

#Bubble Sort
BubbleSort(a[n])
{
	for(i=0;i<n-1;i++)
	{
		min=i;
		for(j=i;j<n;j++)
		{
			if(a[j]>a[j+1])
			{
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=a[j];	
			}	
		}
	}
}


#Insertion sort
InsertionSort(a[n])
{
	b[n];
	for(i=1;i<n;i++)
	{
		temp=a[i];
		j=i-1;
		while(j>=0 && temp>a[j])
		{
			a[j+1]=a[j];
			j--;
		}
		a[j+1]=temp;
	}
}


#Heap Sort
HeapSort(a[n])
{
	heapBottomUp(a[n],1,n)
	for(i=n;i>1;i--)
		maxDelete(a[n],1,i)
}

heapBottomUp(a[n],l,r)
{
	for(i=r/2;i>=1;i--)
		heapify(a[n],l,r,i)
}

heapify(a[n],l,r,p)
{
	if(2*p>r)
		return;
	maxchild=2*p;
	
	if(2*p+1<r)
		if(a[2*p]<a[2*p+1])
			maxchild=2*p+1;

	if(a[p]<a[maxchild])
	{
		temp=a[p];
		a[p]=a[maxchild];
		a[maxchild]=temp;
		heapify(a[n],l,r,maxchild);
	}
}

maxDelete(a[n],l,r,pos)
{
	temp=a[1];
	a[1]=a[pos];
	a[pos]=temp;
	heapify(a[n],l,r-1,1);
}


#Distribution Sort
DistributionSort(a[n],u,l)
{
	freq[u-l];
	for(i=0;i<u-l;i++)
		freq[i]=0;
	for(i=0;i<n;i++)
		freq[a[i]-l]+=1;
	for(j=1;j<u-l;i++)
		freq[j]+=freq[j-1];
	for(i=0;i<n;i++)
	{
		j=a[i]-l;
		S(freq[j]-1)=A[i];
		freq[j]=freq[j]-1;
	}
}

#MergeSort
MergeSort(a[n])
{
	for(i=0;i<n/2;i++)
		b[i]=a[i];
	for(i=n/2;i<n;i++)
		c[i-n/2]=a[i];
	MergeSort(b[n]);
	MergeSort(c[n]);
	Merge(a[n],b[],c[]);
}
Merge(a[n],b[n/2],c[n/2])
{
	i=0;j=0;k=0;
	while(j<n/2 && k<n/2);
	{
		if(b[n/2]<=c[n/2])
		{
			a[i]=b[j];
			j++;
		}
		else
		{
			a[i]=c[k];
			k++;
		}
	i++;		
	}
	while(j<n/2)
		a[i++]=b[j++];
	while(k<n/2)
		a[i++]=c[k++];
}

#QuickSort
QuickSort(a[],l,r)
{
	if(l>r)
	{
		pt=partition(a[],l,r);
		QuickSort(a[],l,pt);
		QuickSort(a[],pt+1,r)
	}	
}

partition(a[],l,r)
{
	pivot=a[l];
	i=l+1;j=r;
	do
	{
		while(a[i]<pivot)
			i++;
		while(a[j]>pivot)
			j--;
		temp=a[i];
		a[i]=a[j];
		a[j]=temp;
	}while(i<j);

	temp=a[i];
	a[i]=a[j];
	a[j]=temp;
	
	temp=a[l];
	a[l]=a[j];
	a[j]=temp;
}


#BST and BFS travesal
BST(a[n])
{
	i=0;
	b[i]=a[0];
	for(i=1;i<n;i++)
	{
		temp=a[0];
		while(temp>n)
		{
			if(a[i]<temp)
				temp=2*temp;
			else
				temp=2*temp+1;
		}
		par=temp/2;
		b[par]=a[i];		
			
	}
}

BFS(b[n])
{
	


}




#Warshall
Warshall(a[n][n])
{
	for(k=0;k<n;k++)
		for(i=0;j<n;j++)
			for(i=0;i<n;i++)
				a[i][j]=a[i][j]||(a[i][k]&&a[k][j]);
		
}

#Floyd
Floyd(a[n][n])
{
	for(k=0;k<n;k++)
		for(i=0;j<n;j++)
			for(i=0;i<n;i++)
			{
				if(i==j)
					a[i][j]=0;
				else
				{
					if(a[i][j]=0)
						a[i][j]=a[i][k]+a[k][j];                        
					else
						a[i][j]=min(a[i][j],a[i][k]+a[k][j])
				}
			}
		}
}
min(a,b)
	return a<b?a:b;


#Brute force String Matching
BFStringMatch(a[n],b[m])
{
	i=0;j=0;
	while(i<n-m)
	{
		for(j=0;j<m;j++)
			if(a[i+j]!=b[j])
			{
				i++;
				break;
			}
		if(j=m)
			return i;
	}
	return -1;
}


#Horsepool
Horsepool(a[n],b[m])
{
	table[512];
	for(i=0;i<m;i++)
		table[i]=m;
	for(i=0;<m;i++)
	{
		table[int(a[m])]=m-i;
	}	
	
	for(i=m;i<n;i++)
	{
		for(j=m-1;j>=0;j--)
		{
			if(b[j]!=a[i-j])
			{
				i=i+table[(int)a[i-j]];
				break;
			}
		}
		if(j=0)
			return i-m;
	}
	return -1;
}

#Knapsack

#Dijkstra
Dijkstra(n,cost[n][n],src,dist[n])
{
	visit[n];
	for(i=0;i<n;i++)
	{
		visit[i]=0;
		for(j=0;j<n;j++)
			if(cost[i][j]==0)
				cost[i][j]=infinity
		dist[i]=cost[src][i];
	}

	for(i=0;i<n;i++)
	{
		min=0;
		while(visit[min]==1)
			min++;
		visit[min]=1;
		path[i]=min;
		

		
	}	
}






























